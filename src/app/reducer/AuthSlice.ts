import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios, { AxiosError, AxiosResponse } from 'axios';
import jwtDecode from 'jwt-decode';
import { isNull } from 'lodash';
import { Decode, UserProfile } from 'src/context/AuthContext';
import { RootState, AppThunk } from '../../app/store';



export type AuthState<UserProfile> = {
    loading: boolean;
    data: UserProfile | null;
    isAuthenticated: boolean;
    error: AxiosResponse<UserProfile,string> | null;
  };

  const authState: AuthState<UserProfile> = {
    loading: false,
    data: null,
    isAuthenticated: false,
    error: null,
  }

 export const getUserInfo = createAsyncThunk(
    'users/getUserInfo',
    async (token: string, {rejectWithValue}) => {
      try {
          let decoded:Decode = jwtDecode(token)
          const resp = await axios.post(
            `${process.env.REACT_APP_PCBA_NOVA_APP_API_URL}/user/findUserById`,
            { token,id:decoded.user.id }
          );
          return resp.data
      } catch (error) {
        rejectWithValue((error as AxiosError).message)
      }
    }
  )

export const authSlice = createSlice({
  name: 'auth',
  initialState:authState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // setAuth: (state,action:PayloadAction<UserProfile,string>) => {
    //     state.data = action.payload;
    //     state.loading=false;
    //     state.error=null;
    //     state.isAuthenticated=true;
    // },
    setAuthLoading:(state) =>{
      state.loading = false;
      state.error=null;
      state.data=null;
    },
    setAuthError:(state,action:PayloadAction<any,string>) =>{
      state.data =null;
      state.error = action.payload;
      state.isAuthenticated= false;
      state.loading =false;
    },
    signout:(state) =>{
      state.data = null;
      state.isAuthenticated = false;
    }
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserInfo.pending, (state) => {
        state.loading = false;
        state.error=null;
        state.data=null;
      })
      .addCase(getUserInfo.fulfilled, (state, action) => {
        state.data = action.payload;
        state.loading=false;
        state.error=null;
        state.isAuthenticated=true;
      })
      .addCase(getUserInfo.rejected, (state,action:PayloadAction<any,string>) => {
        state.data =null;
        state.error = action.payload;
        state.isAuthenticated= false;
        state.loading =false;
      });
  },
});

// export const {setAuth,setAuthLoading,setAuthError,signout  } = authSlice.actions;
export const {signout,setAuthLoading,setAuthError  } = authSlice.actions;


const authReducer =  authSlice.reducer;


export default authReducer